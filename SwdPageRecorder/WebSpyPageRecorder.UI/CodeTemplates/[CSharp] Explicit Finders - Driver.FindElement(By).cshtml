@using WebSpyPageRecorder.UI;
@using WebSpyPageRecorder.UI.CodeGeneration

@functions{
    string GetCSharpBy(string howFromCSharp)
    {
        switch (howFromCSharp)
        {
            case "Id":
            case "Name":
            case "TagName":
            case "ClassName":
            case "CssSelector":
            case "LinkText":
            case "PartialLinkText":
            case "XPath":           return howFromCSharp;
            default:                return "LOCATOR PARSE ERROR";
        }
    }    
	
	
	string QuoteLocator(string locator)
    {
        locator = locator.Replace("\"", "\"\"");
        locator = locator.Replace("{", "{{");
        locator = locator.Replace("}", "}}");
        return locator;
    }
}

using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Interactions.Internal;
using OpenQA.Selenium.Support.UI;

[TestFixture]
public class @Raw(@Model.PageObject.PageObjectName)
{
    // Initialize Driver in any convenient way: Constructor, shared static class etc...
    protected IWebDriver Driver { get; set; }

    [Test]
    public void TestMethod1()
    {
        Driver.Navigate().GoToUrl("@Model.PageObject.PageUrl")
        @foreach (var element in @Model.PageObject.Items)
        {
                if (element.Action == "singleclick")
                {
                    <text>
                        Driver.FindElements(By.@Raw(@GetCSharpBy(@element.How)) (@@"@Raw(@QuoteLocator(@element.Locator))")).Click();
                    </text>
                }
                else if (element.Action == "doubleclick")
                {
                    <text>
                        Actions act = new Actions(Driver);
                        act.doubleClick(Driver.findElement(By.@Raw(@GetCSharpBy(@element.How)) (@@"@Raw(@QuoteLocator(@element.Locator))"))).build().perform();
                    </text>
                }
         }
    }
 }
